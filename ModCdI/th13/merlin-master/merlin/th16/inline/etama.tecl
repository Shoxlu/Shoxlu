inline void etSet(
    /* the arg order can be remembered as ATCAS (aim, type, cnt, ang, spd) */
    int et, int aim, 
    int type, int type2, 
    int cnt, int cnt2, 
    float ang, float ang2,
    float spd, float spd2
) {
    etNew(et);
    etAim(et, aim);
    etSprite(et, type, type2);
    etCount(et, cnt, cnt2);
    etAngle(et, ang, ang2);
    etSpeed(et, spd, spd2);
}


/* bullets travel a small distance forward at a fast speed after being shot, then return to normal speed */
inline void etExDistSet(int et, int channel, int slot) {
	etExSet(et, slot, channel, EX_DIST, NEG, NEG, NEGF, NEGF);
}

inline void etExDist(int et, int channel) {
	etEx(et, channel, EX_DIST, NEG, NEG, NEGF, NEGF);
}


/* slightly changes the bullet spawn animation based on "a" */
inline void etExAnimSet(int et, int channel, int slot, int a) {
	etExSet(et, slot, channel, EX_ANIM, a, NEG, NEGF, NEGF);
}

inline void etExAnim(int et, int channel, int a) {
	etEx(et, channel, EX_ANIM, a, NEG, NEGF, NEGF);
}


/* bullet accelerates for "a" frames in direction "s", value of acceleration is "s" */
inline void etExAccelSet(int et, int channel, int slot, int a, float r, float s) {
	etExSet(et, slot, channel, EX_ACCEL, a, NEG, r, s);
}

inline void etExAccel(int et, int channel, int a, float r, float s) {
	etEx(et, channel, EX_ACCEL, a, NEG, r, s);
}


/* for "a" frames, bullet  acceleration is set to "r", and angular velocity is "s". */
inline void etExAngleAccelSet(int et, int channel, int slot, int a, float r, float s) {
	etExSet(et, slot, channel, EX_ANGLE_ACCEL, a, NEG, r, s);
}

inline void etExAngleAccel(int et, int channel, int a, float r, float s) {
	etEx(et, channel, EX_ANGLE_ACCEL, a, NEG, r, s);
}

/* something that's related to using this with lasers, I haven't investigated that yet */
inline void etExAngleAccelLaserSet(int et, int channel, int slot, int a, int b, float r, float s) {
	etExSet(et, slot, channel, EX_ANGLE_ACCEL, a, b, r, s);
}

inline void etExAngleAccelLaser(int et, int channel, int a, int b, float r, float s) {
	etEx(et, channel, EX_ANGLE_ACCEL, a, b, r, s);
}


/* in "a" frames the bullets will slow down to, and then perform transformation based on "c". This will be repeated "b" times. For the exact function of "c", refer to globals/etama.ecld */
inline void etExAngleSet(int et, int channel, int slot, int a, int b, int c, float r, float s) {
	etExSet2(et, slot, channel, EX_ANGLE, a, b, c, NEG, r, s, NEGF, NEGF);
}

inline void etExAngle(int et, int channel, int a, int b, int c, float r, float s) {
	etEx2(et, channel, EX_ANGLE, a, b, c, NEG, r, s, NEGF, NEGF);
}


/* make bullets able to bounce on the sides of the screen. "a" is the amount of bounces, "b" specifies the walls on which the bullet can bounce (use constants from globals/etama.ecld), "r" is speed after bouncing (cen be NEGF to retain original speed) */
/* it's also worth noting that the the transformations will stop until the bullet bounced the allowed amount of times, so it can be used to detect when it hits the side of the screen (Okine's first st6 spellcard) */
inline void etExBounceSet(int et, int channel, int slot, int a, int b, float r) {
	etExSet(et, slot, channel, EX_BOUNCE, a, b, r, NEGF);
}

inline void etExBounce(int et, int channel, int a, int b, float r) {
	etEx(et, channel, EX_BOUNCE, a, b, r, NEGF);
}

/* this one allows defining custom wall locations, "s" is the distance of the bounce surface from the top/bottom of the screen and "m" is from left/right sides */
inline void etExBounceCustomSet(int et, int channel, int slot, int a, int b, float r, float s, float m) {
	etExSet2(et, slot, channel, EX_BOUNCE, a, b, NEG, NEG, r, s, m, NEGF);
}

inline void etExBounceCustom(int et, int channel, int a, int b, float r, float s, float m) {
	etEx2(et, channel, EX_BOUNCE, a, b, NEG, NEG, r, s, m, NEGF);
}



/* makes bullet invulnerable to bombs and such for "a" frames. Does not actually wait for the effect to finish before moving on to the next transform */
inline void etExInvulnSet(int et, int channel, int slot, int a) {
	etExSet(et, slot, channel, EX_INVULN, a, NEG, NEGF, NEGF);
}

inline void etExInvuln(int et, int channel, int a) {
	etEx(et, channel, EX_INVULN, a, NEG, NEGF, NEGF);
}


/*  I can't get this one to work, supposedly it allows the bullet to leave the screen for "a" frames without getting removed, and role of "b" is unknown */
inline void etExOffscreenSet(int et, int channel, int slot, int a, int b) {
	etExSet(et, slot, channel, EX_OFFSCREEN, a, b, NEGF, NEGF);
}

inline void etExOffscreen(int et, int channel, int a, int b) { 
	etEx(et, channel, EX_OFFSCREEN, a, b, NEGF, NEGF);
}


/* change bullet sprite, basically Et_setSprite(et, a, b) */
inline void etExSpriteSet(int et, int channel, int slot, int a, int b) {
	etExSet(et, slot, channel, EX_SETSPRITE, a, b, NEGF, NEGF);
}

inline void etExSprite(int et, int channel, int a, int b) {
	etEx(et, channel, EX_SETSPRITE, a, b, NEGF, NEGF);
}


/* delete bullet, there are 2 graphical effects that can play when deleting the bullet, the one that's used is determined by "a" (either 0 or 1) */
inline void etExDeleteSet(int et, int channel, int slot, int a) {
	etExSet(et, slot, channel, EX_DELETE, a, NEG, NEGF, NEGF);
}

inline void etExDelete(int et, int channel, int a) {
	etEx(et, channel, EX_DELETE, a, NEG, NEGF, NEGF);
}


/* the bullet plays a sound effect, like playSound(a) */
inline void etExSoundSet(int et, int channel, int slot, int a) {
	etExSet(et, slot, channel, EX_PLAYSOUND, a, NEG, NEGF, NEGF);
}

inline void etExSound(int et, int channel, int a) {
	etEx(et, channel, EX_PLAYSOUND, a, NEG, NEGF, NEGF);
}


/* same concept as bouncing, except it wraps around to the other side of the screen instead (Seija's midboss card in DDC) */
inline void etExWrapSet(int et, int channel, int slot, int a, int b, float r) {
	etExSet(et, slot, channel, EX_WRAP, a, b, r, NEGF);
}

inline void etExWrap(int et, int channel, int a, int b, float r) {
	etEx(et, channel, EX_WRAP, a, b, r, NEGF);
}


/* shoots a bullet
(- is used as a filler) 
Et_aimMode(-, a);
Et_setCount(-, c, d);
Et_setAngle(-, r, s);
Et_setSpeed(-, m, n);
the spawned bullet will use the same transform list as this one, but will start from index = b
this also requires the use of the next ins
*/
inline void etExShootSet(int et, int channel, int slot, int a, int b, int c, int d, float r, float s, float m, float n) {
	etExSet2(et, slot, channel, EX_SHOOT, a, b, c, d, r, s, m, n);
}

inline void etExShoot(int et, int channel, int a, int b, int c, int d, float r, float s, float m, float n) {
	etEx2(et, channel, EX_SHOOT, a, b, c, d, r, s, m, n);
}


/* defines properties of the bullet shot by the previous ins
Et_setSprite(-, a, b);
c determines whether the original bullets is deleted or not, 1 means yes, 0 means no
if c is 1, d is the bullet deletion effect (like exDelete)

THIS HAS TO BE CALLED AFTER EXSHOOT, NOT BEFORE IT.
*/
inline void etExDefineShootSet(int et, int channel, int slot, int a, int b, int c, int d) {
	etExSet2(et, slot, channel, EX_DEFINESHOOT, a, b, c, d, NEGF, NEGF, NEGF, NEGF);
}

inline void etExDefineShoot(int et, int channel, int a, int b, int c, int d) {
	etEx2(et, channel, EX_DEFINESHOOT, a, b, c, d, NEGF, NEGF, NEGF, NEGF);
}

/* a version to be used with laser-shooting transformation, needs investigation */
inline void etExDefineLaserSet(int et, int channel, int slot, int a, int b, int c, int d, float r, float s, float m, float n) {
	etExSet2(et, slot, channel, EX_DEFINESHOOT, a, b, c, d, r, s, m, n);
}

inline void etExDefineLaser(int et, int channel, int a, int b, int c, int d, float r, float s, float m, float n) {
	etEx2(et, channel, EX_DEFINESHOOT, a, b, c, d, r, s, m, n);
}


/* this works differently in every game lmao (generally used to make bullets react to the player, hence the name)
refer to snowman (HSiFS), graze inferno (LoLK), wall of issun (DDC), possibly Miko's final in TD
 */
inline void etExReactSet(int et, int channel, int slot, int a) {
	etExSet(et, slot, channel, EX_REACT, a, NEG, NEGF, NEGF);
}

inline void etExReact(int et, int channel, int a) {
	etEx(et, channel, EX_REACT, a, NEG, NEGF, NEGF);
}


/* immidiately jump to transformation number "a", "b" is used to control the number of loops (th16+ only?) */
inline void etExJumpSet(int et, int channel, int slot, int a, int b) {
	etExSet(et, slot, channel, EX_GOTO, a, b, NEGF, NEGF);
}

inline void etExJump(int et, int channel, int a, int b) {
	etEx(et, channel, EX_GOTO, a, b, NEGF, NEGF);
}


/* in "a" frames using mode "b", move the bullet to absolute coordinates (r, s). Mode is the same as for functions such as Move_posTime */
inline void etExMoveSet(int et, int channel, int slot, int a, int b, float r, float s) {
	etExSet(et, slot, channel, EX_MOVE, a, b, r, s);
}

inline void etExMove(int et, int channel, int a, int b, float r, float s) {
	etEx(et, channel, EX_MOVE, a, b, r, s);
}


/* immidiately change bullet angle to "r" and bullet speed to "s" */
inline void etExVelSet(int et, int channel, int slot, float r, float s) {
	etExSet(et, slot, channel, EX_VEL, NEG, NEG, r, s);
}

inline void etExVel(int et, int channel, float r, float s) {
	etEx(et, channel, EX_VEL, NEG, NEG, r, s);
}


/* adds velocity to bullet, angle=r speed=s
this also affects the flow of the transformation list, which is determined by "a", I'm not sure how. Making "a" non-positive seems to cause infinite transformation loop and freeze the game */
inline void etExVelAddSet(int et, int channel, int slot, int a, float r, float s) { 
	etExSet(et, slot, channel, EX_VELADD, a, NEG, r, s);
}

inline void etExVelAdd(int et, int channel, int a, float r, float s) {
	etEx(et, channel, EX_VELADD, a, NEG, r, s);
}


/* sets bullet brightness effect, a=0 normal, a=1 bright, a=2 dark (th16+ only?) */
inline void etExBrightSet(int et, int channel, int slot, int a) { 
	etExSet(et, slot, channel, EX_BRIGHT, a, NEG, NEGF, NEGF);
}

inline void etExBright(int et, int channel, int a) {
	etEx(et, channel, EX_BRIGHT, a, NEG, NEGF, NEGF);
}


/* in "a" frames, change the bullet angle to "r" and bullet speed to "s" minus original speed (regardless of initial angle) */
/* I swapped "s" and "r" here to match the order of angle, speed arguments of other instructions */
inline void etExVelTimeSet(int et, int channel, int slot, int a, float s, float r) { 
	etExSet(et, slot, channel, EX_VELTIME, a, NEG, r, s);
}

inline void etExVelTime(int et, int channel, int a, float s, float r) {
	etEx(et, channel, EX_VELTIME, a, NEG, r, s);
}


/* in "a" frames using mode "b", the bullet changes size from "r" to "s". */
inline void etExSizeSet(int et, int channel, int slot, int a, int b, float r, float s) { 
	etExSet(et, slot, channel, EX_SIZE, a, b, r, s);
}

inline void etExSize(int et, int channel, int a, int b, float r, float s) {
	etEx(et, channel, EX_SIZE, a, b, r, s);
}


/* save current angle from the bullet to the player, to be used with EX_ANGLE c=2 (ANGLE_SAVED constant) */
inline void etExSaveAngleSet(int et, int channel, int slot) { 
	etExSet(et, slot, channel, EX_SAVEANGLE, NEG, NEG, NEGF, NEGF);
}

inline void etExSaveAngle(int et, int channel) {
	etEx(et, channel, EX_SAVEANGLE, NEG, NEG, NEGF, NEGF);
}


/* execute the inline void set by ins_640 (Et_setExSub) earlier, if ins_640 wasn't used the game explodes */
inline void etExSpecialSet(int et, int channel, int slot) { 
	etExSet(et, slot, channel, EX_SPECIAL, NEG, NEG, NEGF, NEGF);
}

inline void etExSpecial(int et, int channel) {
	etEx(et, channel, EX_SPECIAL, NEG, NEG, NEGF, NEGF);
}


/* change the layer of the bullet to "a" */
inline void etExLayerSet(int et, int channel, int slot, int a) { 
	etExSet(et, slot, channel, EX_LAYER, a, NEG, NEGF, NEGF);
}

inline void etExLayer(int et, int channel, int a) {
	etEx(et, channel, EX_LAYER, a, NEG, NEGF, NEGF);
}


/* set the delay before the bullet spawns to "a", for example if a=60, the bullet will appear 1 second after calling ins_601 (Et_shoot) */
inline void etExDelaySet(int et, int channel, int slot, int a) { 
	etExSet(et, slot, channel, EX_DELAY, a, NEG, NEGF, NEGF);
}

inline void etExDelay(int et, int channel, int a) {
	etEx(et, channel, EX_DELAY, a, NEG, NEGF, NEGF);
}



/* shoot a laser, I don't know how this one works yet, requires use of one of the earlier transform types too */
inline void etExLaserSet(int et, int channel, int slot, int a, int b, int c, int d, float r, float s, float m, float n) {
	etExSet2(et, slot, channel, EX_LASER, a, b, c, d, r, s, m, n);
}

inline void etExLaser(int et, int channel, int a, int b, int c, int d, float r, float s, float m, float n) {
	etEx2(et, channel, EX_LASER, a, b, c, d, r, s, m, n);
}



/* set bullet hitbox, 0.0f no hitbox, -1.0f restore original hitbox, please do not use this to make EoSD mentos */
inline void etExHitboxSet(int et, int channel, int slot, float r) { 
	etExSet(et, slot, channel, EX_HITBOX, NEG, NEG, r, NEGF);
}

inline void etExHitbox(int et, int channel, float r) {
	etEx(et, channel, EX_HITBOX, NEG, NEG, r, NEGF);
}


/* wait "a" frames before moving on to the next transform */
inline void etExWaitSet(int et, int channel, int slot, int a) { 
	etExSet(et, slot, channel, EX_WAIT, a, NEG, NEGF, NEGF);
}

inline void etExWait(int et, int channel, int a) {
	etEx(et, channel, EX_WAIT, a, NEG, NEGF, NEGF);
}
