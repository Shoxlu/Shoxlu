#include "main.tecl"
void MBoss()
{
    setBoss(0);
    $MISS_COUNT = 0;
    $BOMB_COUNT = 0;
    $CAPTURE = 1;
    enmKillAll();
    timerReset();
    enmCreate("Ecl_EtBreak_ni", 0.0f, 0.0f, 9999, 0, 0);
    setChapter(4);
	anmSelect(2);
    anmSetSprite(0, 78);
    anmSelect(1);
    anmSetSprite(1, 53);
    anmSetSprite(2, 113);
    flagSet(76);
    setHurtbox(48.0f, 48.0f);
    setHitbox(40.0f, 40.0f);
    lifeSet(12000);
    lifeMarker(0, 15000.0f, -8355585);
    fog(128.0f, 12521279);
    movePos(320.0f, 224.0f);
    moveBezier(120, -800.0f, -400.0f, 0.0f, 128.0f, 0.0f, 100.0f);
    wait(120);
    moveLimit(0.0f, 128.0f, 280.0f, 48.0f);
	if(SHOTTYPE == 1)
	{
	dialogWait();
	}
    unless ($SPELL_ID >= 0) goto MBoss_1020 @ 0;
    unless (($SPELL_ID >= 14) && ($SPELL_ID <= 17)) goto MBoss_1020 @ 0;
    lifeSet(2000);
    @MBossCard1();
MBoss_1020:
    @MBoss1();
    goto MBoss_1092 @ 0;
MBoss_1072:
    wait(1000);
MBoss_1092:
    if (1) goto MBoss_1072 @ 0;
    delete();
}

void MBoss1()
{
    setNext(0, 2000, 2000, "MBossCard1");
    lifeMarker(0, 2000.0f, -24448);
	timerReset();
    $I0 = 2;
    goto MBoss1_520 @ 0;
MBoss1_172:
	anmSelect(2);
    anmSetSprite(0, 78);
	@MBoss1_at() async;
    enmCreateA("MBoss1enm", ABS_X, ABS_Y, 100, 100, 2); 
	enmCreateA("MBoss1enm1", ABS_X, ABS_Y, 100, 100, 2);
!*
    wait(60);
    moveRand(120, 4, 3.0f);
MBoss1_500:
    wait(120);
MBoss1_520:
    if (1) goto MBoss1_172 @ 0;
    return;
}

void MBoss1enm()
{
	flagSet(1);
	flagSet(2);
!E
	moveVel(rad(45), 2f);
!N
	moveVel(rad(45), 1f);
!H
	moveVel(rad(45), 0.5f);
!L
	moveVel(rad(45), 0.25f);
!*
	wait(60);
	@MBoss1enmpattern();
	wait(10000);
}

void MBoss1enm1()
{
	flagSet(1);
	flagSet(2);
!E
	moveVel(rad(135), 2f);
!N
	moveVel(rad(135), 1f);
!H
	moveVel(rad(135), 0.5f);
!L
	moveVel(rad(135), 0.25f);
!*
	wait(60);
	@MBoss1enmpattern();
	wait(1000000);
}
void MBoss1_at()
{
	etNew(0);
	etSprite(0, 22, 0);
	etAim(0, 1);
	etCountD(0, 2, 2, 2, 2, 1, 1, 1, 1);
	etSpeedD(0, 2f, 1f, 0.5f, 0.25f, 2f, 1f, 0.5f, 0.25f);
	etAngle(0, rad(90), rad(90));
	etExSet(0, 0, 1, EX_SIZE, 120, 0, 1f, 2f);
	etExSet(0, 1, 0, EX_WAIT, 60, NEG, NEGF, NEGF); 
    etEx(0, 1, 16384, 3, 0, 0f, rad(20));
!E
	etEx(0, 1, 8192, 52429060, 15, 1f, 1f);
!N
	etEx(0, 1, 8192, 52429060, 25, 1f, 1f);
!H
	etEx(0, 1, 8192, 52429060, 35, 1f, 1f);
!L
	etEx(0, 1, 8192, 52429060, 40, 1f, 1f);
!*
    etEx(0, 1, 16384, 2, 0, 0f, 0f);
	etExSet(0, 4, 1, EX_SIZE, 1, 0, 1f, 0.5f);
	etOn(0);
    return;
}

void MBoss1enmpattern()
{
	var A; 
	etNew(1);
	etSprite(1, 31, 0);
	etAim(1, 3);
	etAngle(1, %A, 0f);
	etSpeedD(1, 2f, 3f, 4f, 3.5f, 2f, 3f, 4f, 3f);
	etCountD(1, 15, 20, 25, 30, 1, 1, 1, 2);
	etExSet(1, 0, 1, EX_SIZE, 1, 0, 1f, 0.5f);
!L 
	etExSet(1, 0, 1, EX_SIZE, 1, 0, 1f, 0.35f);
!*
	etOn(1);
    return;
}

void MBossCard1()
{
	var A;
    timerReset();
    killAllAsync();
    enmKillAll();
    enmCreate("Ecl_EtBreak", 0.0f, 0.0f, 9999, 0, 0);
    spellEnd();
    funcSet(0);
    reset();
    playSound(27);
    moveVel(0.0f, 0.0f);
    moveVelTime(0, 0, 0.0f, 0.0f);
    movePosTime(0, 0, 0.0f, 0.0f);
    $MISS_COUNT = 0;
    $BOMB_COUNT = 0;
    // anmSelect(2);
    // anmSetSprite(1, 78);
    setNext(0, 0, 2200, "MBossDead");
    setTimeout(0, "MBossEscape");
!EN
    spell(14, 2200, 500000, "Trick or Treat !");
!HL
    spell3(16, 2200, 500000, "No Treat, Only Trick !");
!*
	enmCreateA("SpellPortrait", 0f, 0f, 10, 10, 1);
    movePosTime(60, 4, 0.0f, 144.0f);
    moveLimit(0.0f, 128.0f, 280.0f, 64.0f);
    wait(90);
    anmPlay(1, 63);
+60: //60
    nop();
   // $I0 = 2;
    goto MBossCard1_1012 @ 60;
MBossCard1_824:
	@MBossCard1pattern() async;
	@SafeSpotKiller() async;
	wait(160);
	// anmPlay(1, 1);
	wait(10000);
MBossCard1_1012:
    if (1) goto MBossCard1_824 @ 60;
    return;
}

void MBossCard1pattern()
{
	var A, B, C;
	%A = rad(10);
    //spritebullet 16,25,26,27,28
	etNew(0);
	etSprite(0, 24, 0);
	etAim(0, 1);
	etCountD(0, 1, 1, 2, 2, 1, 1, 2, 2);
	etSpeedD(0, 1f, 2f, 4f, 5f, 1f, 2f, 4.5f, 4f);
	etNew(1);
	etSprite(1, 26, 0);
	etAim(1, 1);
	etCountD(1, 1, 1, 2, 2, 1, 1, 2, 2);
	etSpeedD(1, 1f, 2f, 4f, 5f, 1f, 2f, 4.5f, 4f);
	%A = rad(0);
	%B = rad(180);
	while(1)
	{
!EN
		%A = rad(30);
		times(12)
		{
			etSprite(0, 24, 0);
			etAngle(0, %A, 0f);
			etOn(0);
			%A = %A + rad(10);
			wait(2);
		}
		times(11)
		{
			etSprite(0, 26, 0);
			etAngle(0, %A, 0f);
			etOn(0);
			%A = %A - rad(11);
			diffWait(10, 2, 1, 1);
		}
!HL
		etAim(0,0);
		etAim(1,0);
		%C = RANDRAD * 4f ;
		times(26)
		{
			etAngle(0, %A, 0f);
			etAngle(1, %B, 0f);
			etOn(0);
			etOn(1);
			%A = %A + rad(13) + %C;
			%B = %B - rad(13)- %C;
			wait(2);
		}
		%C = RANDRAD * 4f ;
		times(24)
		{
			etAngle(0, %A, 0f);
			etAngle(1, %B, 0f);
			etOn(0);
			etOn(1);
			%A = %A - rad(11) - %C;
			%B = %B + rad(11) + %C;
			diffWait(10, 2, 2, 1);
		}
!*
	}
}
void SafeSpotKiller() 
{
	etNew(2);
	etSprite(2, 36, 14);
	etAim(2, 2);
	etCountD(2, 16, 20, 28, 30, 1, 1, 2, 2);
	etSpeedD(2, 2f, 3f, 4f, 5f, 2f, 3f, 4.5f, 5.5f);
	while(1)
	{
		if (PLAYER_Y <= 200f)
		{
			etOn(2);
			wait(1);
		}
		wait(30);
	}
}
void SpellPortrait()
{
	anmPlay(3, 26);
}
void MBossDead()
{
    spellEnd();
    enmKillAll();
    moveLimitReset();
    unless ($DIFF <= 1) goto MBossDead_400 @ 0;
    unless ($TIMEOUT == 0) goto MBossDead_320 @ 0;
    enmCreate("Ecl_EtBreak", 0.0f, 0.0f, 9999, 0, 0);
    goto MBossDead_376 @ 0;
MBossDead_320:
    enmCreate("Ecl_EtBreak_ni", 0.0f, 0.0f, 9999, 0, 0);
MBossDead_376:
    goto MBossDead_544 @ 0;
MBossDead_400:
    unless ($TIMEOUT == 0) goto MBossDead_524 @ 0;
    etCancel(640.0f);
    goto MBossDead_544 @ 0;
MBossDead_524:
    etClear(640.0f);
MBossDead_544:
    dropClear();
    $CAPTURE = 1;
    dropExtra(10, 2);
    dropExtra(12, 2);
    dropExtra(11, 5);
    dropExtra(1, 5);
    dropExtra(2, 8);
    dropArea(48.0f, 48.0f);
    dropItems();
    lifeSet(100000);
    setBoss(-1);
    setScreenShake(30, 12, 0);
    anmPlay(0, 25);
    anmPlay(1, 98);
    playSound(5);
    setChapter(0);
    flagSet(19);
   // anmSelect(3);
    //anmSetMain(0, 0);
    wait(120);
    movePosTime(60, 4, -224.0f, 64.0f);
    wait(60);
    delete();
    delete();
}

void MBossEscape()
{
    setNext(0, -1, 0, "");
    setNext(1, -1, 0, "");
    spellEnd();
    moveLimitReset();
    enmKillAll();
    unless ($TIMEOUT == 0) goto MBossEscape_280 @ 0;
    etCancel(640.0f);
    goto MBossEscape_300 @ 0;
MBossEscape_280:
    etClear(640.0f);
MBossEscape_300:
    lifeSet(100000);
    setChapter(0);
    setBoss(-1);
    flagSet(16);
    movePosTime(60, 4, -224.0f, 64.0f);
    wait(60);
    delete();
    delete();
}

void TraceEnemyPos()
{
    var A;
    goto TraceEnemyPos_100 @ 0;
TraceEnemyPos_60:
    moveEnmRel($A);
    wait(1);
TraceEnemyPos_100:
    if (1) goto TraceEnemyPos_60 @ 0;
    return;
}
