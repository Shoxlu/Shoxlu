anim { "enemy.anm"; }

void BossItemCard()
{
    unless ($TIMEOUT == 0) goto BossItemCard_248 @ 0;
    unless ($CAPTURE == 1) goto BossItemCard_248 @ 0;
    dropClear();
    dropMain(12);
    dropItems();
BossItemCard_248:
    return;
}

void BossItemPhase()
{
    var A, B, C;
    unless ($TIMEOUT == 0) goto BossItemPhase_364 @ 0;
    dropClear();
    unless ($CAPTURE == 1) goto BossItemPhase_256 @ 0;
    dropMain(12);
    goto BossItemPhase_276 @ 0;
BossItemPhase_256:
    dropMain(0);
BossItemPhase_276:
    dropExtra(1, $A);
    dropExtra(2, $B);
    dropArea(%C, %C);
    dropItems();
BossItemPhase_364:
    return;
}

void BossItemPhase2()
{
    var A, B, C, D;
    unless ($TIMEOUT == 0) goto BossItemPhase2_388 @ 0;
    dropClear();
    unless ($CAPTURE == 1) goto BossItemPhase2_256 @ 0;
    dropMain(12);
    goto BossItemPhase2_276 @ 0;
BossItemPhase2_256:
    dropMain(0);
BossItemPhase2_276:
    dropExtra(3, $A);
    dropExtra(1, $B);
    dropExtra(2, $C);
    dropArea(%D, %D);
    dropItems();
BossItemPhase2_388:
    return;
}

void DeadAttack1()
{
    %F0 = 3.0f;
    $I0 = 3;
    $I1 = 5;
    moveSetMirror(0);
    enmCreate("DeadAttackEt1", 0.0f, 0.0f, 10, 10, 0);
    return;
}

void DeadAttack2()
{
    %F0 = 3.0f;
    $I0 = 5;
    $I1 = 4;
    moveSetMirror(0);
    enmCreate("DeadAttackEt1", 0.0f, 0.0f, 10, 10, 0);
    return;
}

void DeadAttackEt1()
{
    var A;
    flagSet(32);
    etNew(0);
    etAim(0, 0);
    etSprite(0, 7, 2);
    etCount(0, 1, 1);
    etAngle(0, 0.0f, 0.05235988f);
    etSpeed(0, %F0, 1.0f);
    etExSet(0, 0, 0, 2, 1, -999999, -999999.0f, -999999.0f);
    $A = $I0;
    goto DeadAttackEt1_364 @ 0;
DeadAttackEt1_324:
    etOn(0);
    wait($I1);
DeadAttackEt1_364:
    if $A-- goto DeadAttackEt1_324 @ 0;
    delete();
}

void Ecl_EtBreak()
{
    var A;
    %A = 16.0f;
    flagSet(32);
    goto Ecl_EtBreak_216 @ 1;
Ecl_EtBreak_120:
    etCancel(%A);
    %A;
+1: //1
    10;
    addf();
    setf(%A);
Ecl_EtBreak_216:
    if (%A < 640.0f) goto Ecl_EtBreak_120 @ 0;
    delete();
}

void Ecl_EtBreak2()
{
    var A;
    %A = 16.0f;
    flagSet(32);
    goto Ecl_EtBreak2_216 @ 1;
Ecl_EtBreak2_120:
    etCancel(%A);
	%A;
+1:
    18;
    addf();
    setf(%A);
Ecl_EtBreak2_216:
    if (%A < 640.0f) goto Ecl_EtBreak2_120 @ 0;
    delete();
}

void Ecl_EtBreak2_ni()
{
    var A;
    %A = 16.0f;
    flagSet(32);
    goto Ecl_EtBreak2_ni_216 @ 1;
Ecl_EtBreak2_ni_120:
    etClear(%A);
    %A;
+1:
    6;
    addf();
    setf(%A);
Ecl_EtBreak2_ni_216:
    if (%A < 640.0f) goto Ecl_EtBreak2_ni_120 @ 0;
    delete();
}

void Ecl_EtBreak_ni()
{
    var A;
    %A = 16.0f;
    flagSet(32);
    goto Ecl_EtBreak_ni_216 @ 1;
Ecl_EtBreak_ni_120:
    etClear(%A);
    %A;
+1: //1
    10;
    addf();
    setf(%A);
Ecl_EtBreak_ni_216:
    if (%A < 640.0f) goto Ecl_EtBreak_ni_120 @ 0;
    delete();
}

void EffChargePoint()
{
    var A, B, C;
    anmSelect(1);
    anmSetSprite($B, 85 + $C);
    anmRotate($B, %A);
    playSound(54);
    return;
}

void EffChargePoint2()
{
    var A, B, C, D, E;
    anmSelect(1);
    anmSetSprite($C, 153 + $D);
    anmRotate($C, %A);
    anmSetSprite($C + 1, 153 + $E);
    anmRotate($C + 1, %A + %B);
    playSound(54);
    return;
}

void EffChargePoint3()
{
    var A, B, C, D, E, F;
    anmSelect(1);
    anmSetSprite($C, 153 + $D);
    anmRotate($C, %A + %B);
    anmSetSprite($C + 1, 153 + $E);
    anmRotate($C + 1, %A);
    anmSetSprite($C + 2, 153 + $F);
    anmRotate($C + 2, %A - %B);
    playSound(54);
    return;
}

void MainBossSpell()
{
    setChapter(6);
+10: //10
    dialogRead(-1);
+1: //11
    enmCreateA("Boss", 144.0f, -16.0f, 40, 1000, 1);
    bossWait();
    setChapter(7);
    wait(170);
    dialogRead(-2);
    dialogWait();
    return;
}

void MainMBossSpell()
{
    setChapter(4);
+10: //10
    dialogRead(-3);
+1: //11
    enmCreateA("MBoss", 144.0f, -16.0f, 40, 1000, 1);
    bossWait();
    setChapter(7);
    wait(100);
    dialogRead(-2);
    dialogWait();
    return;
}

void et_ofs_r()
{
    var A, B, C, D;
    mathCirclePos(%C, %D, %RANDRAD, %B * %RANDF);
    etOffset($A, %C, %D);
    return;
}

void test()
{
!NHL
    moveVel(%ANGLE_PLAYER, 0.0f);
    moveVelTime(60, 0, %ANGLE_PLAYER + (%RANDF2 * 0.5235988f), 2.0f);
!E
    moveVel(%F0 + (%RANDF2 * 0.5235988f), 0.0f);
    moveVelTime(60, 0, -999999.0f, 2.0f);
!*
    return;
}

void test2()
{
    var A, B;
    return;
}
